<h1>New article</h1>

<%= form_with scope: :article, url: articles_path, local: true do |form| %>
<!-- form_with = you pass it an identifying scope for this form, in this case it
is the symbol :article, This tells the form_with helper what this form is for.
Inside the block for this method, the FormBuilder object - represented by form -
is used to build two labels and two text fields, one each for the title and text
of an article. Finally, a call to submit on the form object will create a submit
button for the form.-->
<% if @article.errors.any? %>
  <div id="error_explanation">
    <h2>
      <%= pluralize(@article.errors.count, "error") %> prohibited
      this article from being saved:
    </h2>
    <ul>
      <% @article.errors.full_messages.each do |msg| %>
        <li><%= msg %></li>
      <% end %>
    </ul>
  </div>

  <!-- A few things are going on. We check if there are any errors with 
  @article.errors.any?, and in that case we show a list of all errors with
  @article.errors.full_messages.
  pluralize is a rails helper that takes a number and a string as its arguments.
  If the number is greater than one, the string will be automatically pluralized.
  The reason why we added @article = Article.new in the ArticlesController is
  that otherwise @article would be nil in our view, and calling @article.errors.any?
  would throw an error.
  Rails automatically wraps fields that contain an error with a div with class
  field_with_errors. You can define a css rule to make them standout. -->
<% end %>
  <p>
    <%= form.label :title %><br>
    <%= form.text_field :title %>
  </p>

  <p>
    <%= form.label :text %><br>
    <%= form.text_area :text %>
  </p>

  <p>
    <%= form.submit %>
  </p>

<%= form_with scope: :article, url: articles_path, local: true do |form| %>
  ...
<% end %>

<%= link_to 'Back', articles_path %>
<% end %>
